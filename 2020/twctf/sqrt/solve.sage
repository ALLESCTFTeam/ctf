p = 6722156186149423473586056936189163112345526308304739592548269432948561498704906497631759731744824085311511299618196491816929603296108414569727189748975204102209646335725406551943711581704258725226874414399572244863268492324353927787818836752142254189928999592648333789131233670456465647924867060170327150559233

#test_pt = 46118657867175075976553297945503639995736180938511476693744608094459681699136649166462306787961876605
#c64 = pow(test_pt, 1 << 64, p)
c64 = 5602276430032875007249509644314357293319755912603737631044802989314683039473469151600643674831915676677562504743413434940280819915470852112137937963496770923674944514657123370759858913638782767380945111493317828235741160391407042689991007589804877919105123960837253705596164618906554015382923343311865102111160

q = 6260495806252046929286845900294522859477928195432517298076552742112950886324892284005656588584952135860464814694781314411135020941596864321946343173249814754547221898776857696421175805576386605600709481536943693517957341228010065655986626401676101786949671425529135194729299908929006799985530842254243
assert(p == 2**30*q + 1)

k = 1
exp2 = (1 << 34) + q*k
e2inv = inverse_mod(exp2, p-1)
c30 = pow(c64, e2inv, p)
assert(pow(c30, 1<<34, p) == c64)
print(c30)

c0_target = test_pt

#assert(pow(test_pt, 1 << 30, p) == c30)

print("Starting brute...")
index = 0
for c24 in c30.nth_root(2**6, all=True):
    #if c24 != pow(test_pt, 2**24, p):
    #    continue
    for c16 in c24.nth_root(2**8, all=True):
        #if c16 != pow(test_pt, 2**16, p):
        #    continue
        for c8 in c16.nth_root(2**8, all=True):
            #if c8 != pow(test_pt, 2**8, p):
            #    continue
            for c0 in c8.nth_root(2**8, all=True):
                index += 1
                if index % 100000 == 0:
                    print("progress:", index, float(index / 2**30))
                #print(hex(c0))
                h = hex(c0)
                if c0 == c0_target:
                    print("FOUND!")
                if "0x54574354467b" in h:
                    print("FOUND2", index, c0, len(hex(c0)))
                    exit()
                #assert(pow(c0, 1 << 8, p) == c8)
                #assert(pow(c0, 1 << 16, p) == c16)
                #assert(pow(c0, 1 << 24, p) == c24)
                #assert(pow(c0, 1 << 30, p) == c30)
                #assert(pow(c0, 1 << 64, p) == c64)